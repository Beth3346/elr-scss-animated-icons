@import "elr-scss-functions/src/main";
@import "elr-scss-config/src/main";
@import "elr-scss-animations/src/main";

@mixin elr-icon-border($config: ()) {
  $config: extend(
    (
      color: $primary-color,
    ),
    $config
  );

  $color: map-get($config, color);

  transition: background 0.2s ease;

  &::after {
    top: -7px;
    left: -7px;
    padding: 7px;
    box-shadow: 0 0 0 1px $color;
    transition: transform 0.2s, opacity 0.2s;
    transform: scale(0.8);
    opacity: 0;
  }

  &:hover,
  &.active {
    background-color: rgba($color, 1);

    &::after {
      transform: scale(1);
      opacity: 1;
    }

    .fa {
      color: $white;
    }
  }
}

@mixin elr-icon-border-pop($config: ()) {
  $config: extend(
    (
      color: $primary-color,
    ),
    $config
  );

  $color: map-get($config, color);

  transition: background 0.2s ease;

  &::after {
    top: -7px;
    left: -7px;
    padding: 7px;
    box-shadow: 0 0 0 1px $color;
    transition: transform 0.2s, opacity 0.2s;
    transform: scale(1.2);
    opacity: 0;
  }

  &:hover,
  &.active {
    background-color: rgba($color, 1);

    &::after {
      transform: scale(1);
      opacity: 1;
    }

    .fa {
      color: $white;
    }
  }
}

@mixin elr-icon-border-pull($config: ()) {
  $config: extend(
    (
      color: $primary-color,
    ),
    $config
  );

  $color: map-get($config, color);

  color: $white;
  box-shadow: 0 0 0 1px $color;
  transition: color 0.3s;
  background-color: $white;

  .fa {
    color: $white;
  }

  &::after {
    top: -2px;
    left: -2px;
    padding: 2px;
    z-index: -1;
    background: $color;
    transition: transform 0.2s, opacity 0.2s;
  }

  &:hover,
  &.active {
    &::after {
      transform: scale(0.85);
    }

    .fa {
      color: $white;
    }
  }
}

@mixin elr-icon-background-fade($config: ()) {
  $config: extend(
    (
      color: $primary-color,
    ),
    $config
  );

  $color: map-get($config, color);

  color: $white;
  box-shadow: 0 0 0 1px $color;
  transition: color 0.3s;
  background-color: $white;

  .fa {
    color: $white;
  }

  &::after {
    top: -2px;
    left: -2px;
    padding: 2px;
    z-index: -1;
    background: $color;
    transition: transform 0.2s, opacity 0.2s;
  }

  &:hover,
  &.active {
    &::after {
      transform: scale(0);
      opacity: 0;
      transition: transform 0.4s, opacity 0.2s;
    }

    .fa {
      color: $color;
    }
  }
}

@mixin elr-icon-dash($config: ()) {
  $config: extend(
    (
      border-thickness: 3px,
      rotate: false,
      color: $primary-color,
    ),
    $config
  );

  $border-thickness: map-get($config, border-thickness);
  $rotate: map-get($config, rotate);
  $color: map-get($config, color);

  box-shadow: 0 0 0 $border-thickness rgba($color, 1);
  transition: box-shadow 0.3s;

  &::after {
    top: -$border-thickness;
    left: -$border-thickness;
    padding: 0;
    z-index: 10;
    border: $border-thickness dashed $color;
  }

  &:hover,
  &.active {
    box-shadow: 0 0 0 0 rgba($color, 0);

    &::after {
      @if $rotate {
        @include elr-spin;
      }
    }
  }
}

@mixin elr-icon-animated($config: ()) {
  $config: extend(
    (
      width: 90px,
      background-color: lighten($primary-color, 20%),
      color: $primary-color,
    ),
    $config
  );

  $width: map-get($config, width);
  $background-color: map-get($config, background-color);
  $color: map-get($config, color);
  color: $color;
  line-height: $width;
  transition: color 0.2s;

  width: $width;
  height: $width;
  border-radius: ($width * 0.5);
  display: block;
  margin: 20px auto 30px;
  text-align: center;
  background: rgba($background-color, 0.2);
  position: relative;
  cursor: pointer;
  z-index: 1;
  font-size: 48px;

  &::after {
    content: "";
    pointer-events: none;
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    box-sizing: content-box;
  }
}

@mixin elr-icon-close($config: ()) {
  $config: extend(
    (
      width: 32px,
      thickness: 4px,
      color: $text-color,
    ),
    $config
  );

  $width: map-get($config, width);
  $thickness: map-get($config, thickness);
  $color: map-get($config, color);

  width: $width;
  height: $width;
  position: relative;
  display: block;
  cursor: pointer;
  border: 0;
  background: transparent;

  span,
  &::before,
  &::after {
    background: $color;
    height: $thickness;
    border-radius: $thickness;
    width: $width;
    display: block;
    position: absolute;
  }

  &::before,
  &::after {
    content: "";
    transition: top 0.2s ease 0.2s, transform 0.3s ease-out 0s;
  }

  &::before {
    top: $thickness;
  }

  &::after {
    top: $width - $thickness;
  }

  span {
    transition: opacity 0.2s ease 0s;
    top: ($width * 0.5);
  }

  &.active {
    &::before,
    &::after {
      top: ($width * 0.5) - ($thickness * 0.5);
      transition: top 0.2s ease 0s, transform 0.3s ease-in 0.2s;
    }

    &::before {
      transform: rotate(-45deg);
    }

    &::after {
      transform: rotate(45deg);
    }

    span {
      opacity: 0;
      visibility: hidden;
    }
  }
}

@mixin elr-icon-arrow($config: ()) {
  $config: extend(
    (
      direction: "left",
      width: 30px,
      thickness: 4px,
      color: $text-color,
    ),
    $config
  );

  $direction: map-get($config, direction);
  $width: map-get($config, width);
  $thickness: map-get($config, thickness);
  $color: map-get($config, color);

  width: $width;
  height: $width;
  position: relative;
  display: block;
  cursor: pointer;
  border: 0;
  background: transparent;

  span,
  &::before,
  &::after {
    background: $color;
    height: $thickness;
    border-radius: $thickness;
    width: $width;
    display: block;
    position: absolute;
    transition: all 0.3s;
  }

  &::before,
  &::after {
    content: "";
  }

  &::before {
    top: $thickness;
  }

  &::after {
    top: $width - $thickness;
  }

  &.active {
    span {
      @if ($direction == "left") {
        transform: rotate(-180deg);
      } @else {
        transform: rotate(180deg);
      }
    }

    &::before {
      width: 50%;
      top: 11px;

      @if ($direction == "left") {
        left: 6px;
        transform: rotate(-217deg);
      } @else {
        right: -6px;
        transform: rotate(217deg);
      }
    }

    &::after {
      width: 50%;
      bottom: 7px;
      top: auto;

      @if ($direction == "left") {
        left: 6px;
        transform: rotate(-145deg);
      } @else {
        left: auto;
        right: -6px;
        transform: rotate(145deg);
      }
    }
  }
}
